Start Newton's method
     Define self, tol, xi, niter, fun, dfun, type_error = 1, fun, dfun

      if fx == 0:
             return the root
     end if
         if dfun == 0:
             return Error, derivative cannot be 0.
     end if

     counter = 0
     error = tolerance + 1

         while error> tol and fx! = 0 and dfx! = 0 and counter <iterations:
             xn = xi - (fx / dfx)
             fx = fun.evaluate2 (xn)
             dfx = dfun.evaluate2 (xn)
         end while


         if type_error == 0:
                 error = | xn-xi |
             else:
                 error = | (xn-xi) / xn |
         end if

         xi = xn

         counter +1

         if fx == 0:
             return xi is root
         elif error <tol:
             return xn is an approximation to a root with a tolerance "
         elif dfx == 0:
             return xn is a possible multiple root
         else:
             return The method failed in n iterations
         end if
    
   
End Process